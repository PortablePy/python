#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.9.3
# In conjunction with Tcl version 8.6
#    Apr 09, 2017 10:58:50 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import complex_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Complex_Example (root)
    complex_support.init(root, top)
    root.mainloop()

w = None
def create_Complex_Example(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Complex_Example (w)
    complex_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Complex_Example():
    global w
    w.destroy()
    w = None


class Complex_Example:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#f5deb3'  # X11 color: 'wheat'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#b2c9f4' # Closest X11 color: 'SlateGray2'
        _ana1color = '#eaf4b2' # Closest X11 color: '{pale goldenrod}' 
        _ana2color = '#f4bcb2' # Closest X11 color: 'RosyBrown2' 
        font9 = "-family {DejaVu Sans Mono} -size 14 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("565x513+650+150")
        top.title("Complex Example")
        top.configure(background="#f5deb3")
        top.configure(highlightbackground="#f5deb3")
        top.configure(highlightcolor="black")



        self.TPanedwindow1 = ttk.Panedwindow(top, orient="vertical")
        self.TPanedwindow1.place(relx=0.05, rely=0.06, relheight=0.8
                , relwidth=0.88)
        self.TPanedwindow1.configure(width=200)
        self.TPanedwindow1_p1 = ttk.Labelframe(height=75, text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_p1)
        self.TPanedwindow1_p2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow1.add(self.TPanedwindow1_p2)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TPanedwindow2 = ttk.Panedwindow(self.TPanedwindow1_p2
                , orient="horizontal")
        self.TPanedwindow2.place(relx=0.08, rely=0.09, relheight=0.85
                , relwidth=0.86)
        self.TPanedwindow2.configure(width=200)
        self.TPanedwindow2_p1 = ttk.Labelframe(width=85, text='Pane 1')
        self.TPanedwindow2.add(self.TPanedwindow2_p1)
        self.TPanedwindow2_p2 = ttk.Labelframe(text='Pane 2')
        self.TPanedwindow2.add(self.TPanedwindow2_p2)
        self.__funcid1 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash1)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(self.TPanedwindow2_p2)
        self.TNotebook1.place(relx=0.06, rely=0.11, relheight=0.83
                , relwidth=0.89)
        self.TNotebook1.configure(width=300)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text="Page 1",underline="-1",)
        self.TNotebook1_t2 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text="Page 2",underline="-1",)

        self.Label1 = Label(self.TNotebook1_t1)
        self.Label1.place(relx=0.13, rely=0.2, height=27, width=114)
        self.Label1.configure(activebackground="#ffffcd")
        self.Label1.configure(background="#f5deb3")
        self.Label1.configure(disabledforeground="#b8a786")
        self.Label1.configure(font=font9)
        self.Label1.configure(highlightbackground="#f5deb3")
        self.Label1.configure(text='''First Page''')

        self.Button2 = Button(self.TNotebook1_t1)
        self.Button2.place(relx=0.37, rely=0.5, height=35, width=70)
        self.Button2.configure(activebackground="#f4bcb2")
        self.Button2.configure(background="#f5deb3")
        self.Button2.configure(command=complex_support.qqq)
        self.Button2.configure(disabledforeground="#b8a786")
        self.Button2.configure(font=font9)
        self.Button2.configure(highlightbackground="#f5deb3")
        self.Button2.configure(text='''Redo''')

        self.Message1 = Message(self.TNotebook1_t2)
        self.Message1.place(relx=0.23, rely=0.3, relheight=0.17, relwidth=0.52)
        self.Message1.configure(background="#f5deb3")
        self.Message1.configure(font=font9)
        self.Message1.configure(highlightbackground="#f5deb3")
        self.Message1.configure(text='''Second Page''')
        self.Message1.configure(width=157)

        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor=SE, relx=1.0, rely=1.0)

        self.Button1 = Button(top)
        self.Button1.place(relx=0.44, rely=0.9, height=35, width=70)
        self.Button1.configure(activebackground="#f4bcb2")
        self.Button1.configure(background="#f5deb3")
        self.Button1.configure(command=complex_support.quit)
        self.Button1.configure(disabledforeground="#b8a786")
        self.Button1.configure(font=font9)
        self.Button1.configure(highlightbackground="#f5deb3")
        self.Button1.configure(text='''Quit''')



    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def __adjust_sash1(self, event):
        paned = event.widget
        pos = [85, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid1)
        del self.__funcid1





if __name__ == '__main__':
    vp_start_gui()



