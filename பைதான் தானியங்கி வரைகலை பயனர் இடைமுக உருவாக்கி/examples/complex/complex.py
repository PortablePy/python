#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    May 14, 2021 12:22:44 PM PDT  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import complex_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    complex_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    complex_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#f5deb3'  # X11 color: 'wheat'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#b2c9f4' # Closest X11 color: 'SlateGray2'
        _ana1color = '#eaf4b2' # Closest X11 color: '{pale goldenrod}'
        _ana2color = '#f4bcb2' # Closest X11 color: 'RosyBrown2'
        font12 = "-family {DejaVu Sans Mono} -size 14"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font12)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("565x513+691+273")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(0,  0)
        top.title("Complex Example")
        top.configure(background="#f5deb3")
        top.configure(highlightbackground="#f5deb3")
        top.configure(highlightcolor="black")

        self.TPanedwindow1 = ttk.Panedwindow(top, orient="vertical")
        self.TPanedwindow1.place(x=30, y=30, height=410, width=500)
        self.TPanedwindow1_p1 = ttk.Labelframe(self.TPanedwindow1, height=75
                , text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)
        self.TPanedwindow1_p2 = ttk.Labelframe(self.TPanedwindow1, text='Pane 2')

        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TPanedwindow2 = ttk.Panedwindow(self.TPanedwindow1_p2
                , orient="horizontal")
        self.TPanedwindow2.place(x=40, y=30, height=280, width=430
                , bordermode='ignore')
        self.TPanedwindow2_p1 = ttk.Labelframe(self.TPanedwindow2, width=85
                , text='Pane 1')
        self.TPanedwindow2.add(self.TPanedwindow2_p1, weight=0)
        self.TPanedwindow2_p2 = ttk.Labelframe(self.TPanedwindow2, text='Pane 2')

        self.TPanedwindow2.add(self.TPanedwindow2_p2, weight=0)
        self.__funcid1 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash1)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(self.TPanedwindow2_p2)
        self.TNotebook1.place(x=20, y=30, height=232, width=302
                , bordermode='ignore')
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Page 1",compound="none",underline="-1",)
        self.TNotebook1_t0.configure(background="#f5deb3")
        self.TNotebook1_t0.configure(highlightbackground="#f5deb3")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="Page 2",compound="none",underline="-1",)
        self.TNotebook1_t1.configure(background="#f5deb3")
        self.TNotebook1_t1.configure(highlightbackground="#f5deb3")

        self.Label1 = tk.Label(self.TNotebook1_t0)
        self.Label1.place(x=40, y=40, height=27, width=114)
        self.Label1.configure(activebackground="#ffffcd")
        self.Label1.configure(background="#f5deb3")
        self.Label1.configure(disabledforeground="#b8a786")
        self.Label1.configure(font="-family {DejaVu Sans Mono} -size 14")
        self.Label1.configure(highlightbackground="#f5deb3")
        self.Label1.configure(text='''First Page''')

        self.Button2 = tk.Button(self.TNotebook1_t0)
        self.Button2.place(x=110, y=100, height=37, width=72)
        self.Button2.configure(activebackground="#f4bcb2")
        self.Button2.configure(background="#f5deb3")
        self.Button2.configure(command=complex_support.qqq)
        self.Button2.configure(disabledforeground="#b8a786")
        self.Button2.configure(font="-family {DejaVu Sans Mono} -size 14")
        self.Button2.configure(highlightbackground="#f5deb3")
        self.Button2.configure(text='''Redo''')

        self.Message1 = tk.Message(self.TNotebook1_t1)
        self.Message1.place(x=70, y=60, height=33, width=157)
        self.Message1.configure(background="#f5deb3")
        self.Message1.configure(font="-family {DejaVu Sans Mono} -size 14")
        self.Message1.configure(highlightbackground="#f5deb3")
        self.Message1.configure(text='''Second Page''')
        self.Message1.configure(width=157)

        self.style.configure('TSizegrip', background=_bgcolor)
        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor='se', relx=1.0, rely=1.0)

        self.Button1 = tk.Button(top)
        self.Button1.place(x=250, y=460, height=37, width=72)
        self.Button1.configure(activebackground="#f4bcb2")
        self.Button1.configure(background="#f5deb3")
        self.Button1.configure(command=complex_support.quit)
        self.Button1.configure(disabledforeground="#b8a786")
        self.Button1.configure(font="-family {DejaVu Sans Mono} -size 14")
        self.Button1.configure(highlightbackground="#f5deb3")
        self.Button1.configure(text='''Quit''')

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def __adjust_sash1(self, event):
        paned = event.widget
        pos = [85, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid1)
        del self.__funcid1

if __name__ == '__main__':
    vp_start_gui()





