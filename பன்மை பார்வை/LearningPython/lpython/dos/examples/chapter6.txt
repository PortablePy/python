** Page 153-154 ***************************************************************

>>> class FirstClass:                # define a class object
...     def setdata(self, value):    # define class methods
...         self.data = value        # self is the instance
...     def display(self):
...         print self.data          # self.data: per instance

>>> x = FirstClass()      # make two instances
>>> y = FirstClass()      # each is a new namespace

>>> x.setdata("King Arthur")     # call methods: self is x or y
>>> y.setdata(3.14159)           # runs: FirstClass.setdata(y, 3.14159)

>>> x.display()     # self.data differs in each
King Arthur
>>> y.display()
3.14159

>>> x.data = "New value"    # can get/set attributes
>>> x.display()             # outside the class too
New value


** Page 155-156 ***************************************************************

>>> class SecondClass(FirstClass):           # inherits setdata
...     def display(self):                   # changes display
...         print 'Current value = "%s"' % self.data

>>> z = SecondClass()
>>> z.setdata(42)            # setdata found in FirstClass
>>> z.display()              # finds overridden method in SecondClass
Current value = "42"

>>> x.display()      # x is still a FirstClass instance (old message)
New value


** Page 157 *******************************************************************

>>> class ThirdClass(SecondClass):                # is-a SecondClass
...     def __init__(self, value):                # on "ThirdClass(value)"
...         self.data = value
...     def __add__(self, other):                 # on "self + other"
...         return ThirdClass(self.data + other)
...     def __mul__(self, other):
...         self.data = self.data * other         # on "self * other"

>>> a = ThirdClass("abc")      # new __init__ called
>>> a.display()                # inherited method
Current value = "abc"

>>> b = a + 'xyz'              # new __add__ called: makes a new instance
>>> b.display()
Current value = "abcxyz"

>>> a * 3                      # new __mul__ called: changes instance in-place
>>> a.display()
Current value = "abcabcabc"


** Page 159 *******************************************************************

# type these interactively, or import from a module file

class aSuperclass: pass

class Subclass(aSuperclass):      # define subclass
    data = 'spam'                 # assign class attr
    def __init__(self, value):    # assign class attr
        self.data = value         # assign instance attr
    def display(self):
        print self.data, Subclass.data      # instance, class

>>> x = Subclass(1)            # make two instance objects
>>> y = Subclass(2)            # each has its own "data"
>>> x.display(); y.display()   # "self.data" differs, "Subclass.data" same
1 spam
2 spam


** Page 160 *******************************************************************

class NextClass:                # define class
    def printer(self, text):    # define method
        print text

>>> x = NextClass()               # make instance
>>> x.printer('Hello world!')     # call its method
Hello world!

>>> NextClass.printer(x, 'Hello world!')    # class method
Hello world!


** Page 162 *******************************************************************

>>> class Super:
...     def method(self):
...         print 'in Super.method'
...
>>> class Sub(Super):
...     def method(self):                    # override method
...         print 'starting Sub.method'      # add actions here
...         Super.method(self)               # run default action
...         print 'ending Sub.method'
...

>>> x = Super()       # make a Super instance
>>> x.method()        # runs Super.method
in Super.method

>>> x = Sub()         # make a Sub instance
>>> x.method()        # runs Sub.method, which calls Super.method
starting Sub.method
in Super.method
ending Sub.method


** Page 163 *******************************************************************

# file specialize.py

class Super:
    def method(self):
        print 'in Super.method'        # default
    def delegate(self):
        self.action()                  # expected

class Inheritor(Super):
    pass

class Replacer(Super):
    def method(self):
        print 'in Replacer.method'

class Extender(Super):
    def method(self):
        print 'starting Extender.method'
        Super.method(self)
        print 'ending Extender.method'

class Provider(Super):
    def action(self):
        print 'in Provider.action'

if __name__ == '__main__':
    for klass in (Inheritor, Replacer, Extender):
        print '\n' + klass.__name__ + '...'
        klass().method()
    print '\nProvider...'
    Provider().delegate()

% python specialize.py
Inheritor...
in Super.method

Replacer...
in Replacer.method

Extender...
starting Extender.method
in Super.method
ending Extender.method

Provider...
in Provider.action


** Page 165-168 ***************************************************************

# number.py

class Number:
    def __init__(self, start):             # on Number(start)
        self.data = start
    def __sub__(self, other):              # on instance - other
        return Number(self.data - other)   # result is a new instance

>>> from number import Number      # fetch class from module
>>> X = Number(5)                  # calls Number.__init__(X, 5)
>>> Y = X - 2                      # calls Number.__sub__(X, 2)
>>> Y.data
3


>>> class indexer:
...     def __getitem__(self, index):
...         return index ** 2
...
>>> X = indexer()
>>> for i in range(5):
...     print X[i],          # X[i] calls __getitem__(X, i)
...
0 1 4 9 16


>>> class stepper:
...     def __getitem__(self, i):
...         return self.data[i]
...
>>> X = stepper()        # X is a stepper object
>>> X.data = "Spam"
>>>
>>> for item in X:       # for loops call __getitem__
...     print item,      # for indexes items 0..N
...
S p a m
>>>
>>> 'p' in X             # 'in' operator calls __getitem__ too
1


>>> class empty:
...     def __getattr__(self, attrname):
...         if attrname == "age":
...             return 37
...         else:
...             raise AttributeError, attrname
...
>>> X = empty()
>>> X.age
37
>>> X.name
Traceback (innermost last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 6, in __getattr__
AttributeError: name


>>> class adder:
...     def __init__(self, value=0):
...         self.data = value               # initialize data
...     def __add__(self, other):
...         self.data = self.data + other   # add other in-place
...     def __repr__(self):
...         return `self.data`              # convert to string
...
>>> X = adder(1)      # __init__
>>> X + 2; X + 2      # __add__
>>> X                 # __repr__
5


** Page 169 *******************************************************************

>>> class super:
...     def hello(self):
...         self.data1 = "spam"
...
>>> class sub(super):
...     def howdy(self):
...         self.data2 = "eggs"
...
>>> X = sub()         # make a new namespace (dictionary)
>>> X.__dict__
{}
>>> X.hello()         # changes instance namespace
>>> X.__dict__
{'data1': 'spam'}

>>> X.howdy()         # changes instance namespace
>>> X.__dict__
{'data2': 'eggs', 'data1': 'spam'}

>>> super.__dict__
{'hello': <function hello at 88d9b0>, '__doc__': None}

>>> sub.__dict__
{'__doc__': None, 'howdy': <function howdy at 88ea20>}

>>> X.data3 = "toast"
>>> X.__dict__
{'data3': 'toast', 'data2': 'eggs', 'data1': 'spam'}


** Page 171 *******************************************************************

# file employees.py

class Employee:
    def __init__(self, name, salary=0):
        self.name   = name
        self.salary = salary
    def giveRaise(self, percent):
        self.salary = self.salary + (self.salary * percent)
    def work(self):
        print self.name, "does stuff"
    def __repr__(self):
        return "<Employee: name=%s, salary=%s>" % (self.name, self.salary)

class Chef(Employee):
    def __init__(self, name):
        Employee.__init__(self, name, 50000)
    def work(self):
        print self.name, "makes food"

class Server(Employee):
    def __init__(self, name):
        Employee.__init__(self, name, 40000)
    def work(self):
        print self.name, "interfaces with customer"

class PizzaRobot(Chef):
    def __init__(self, name):
        Chef.__init__(self, name)
    def work(self):
        print self.name, "makes pizza"

if __name__ == "__main__":
    bob = PizzaRobot('bob')        # make a robot named bob
    print bob                      # runs inherited __repr__
    bob.giveRaise(0.20)            # give bob a 20% raise
    print bob; print

    for klass in Employee, Chef, Server, PizzaRobot:
        obj = klass(klass.__name__)
        obj.work()


C:\python\examples> python employees.py
<Employee: name=bob, salary=50000>
<Employee: name=bob, salary=60000.0>

Employee does stuff
Chef makes food
Server interfaces with customer
PizzaRobot makes pizza


** Page 173 *******************************************************************

# file pizzashop.py

from employees import PizzaRobot, Server

class Customer:
    def __init__(self, name):
        self.name = name
    def order(self, server):
        print self.name, "orders from", server
    def pay(self, server):
        print self.name, "pays for item to", server

class Oven:
    def bake(self):
        print "oven bakes"

class PizzaShop:
    def __init__(self):
        self.server = Server('Pat')        # embed other objects
        self.chef   = PizzaRobot('Bob')    # a robot named bob
        self.oven   = Oven()

    def order(self, name):
        customer = Customer(name)      # activate other objects
        customer.order(self.server)    # customer orders from server
        self.chef.work()
        self.oven.bake()
        customer.pay(self.server)

if __name__ == "__main__":
    scene = PizzaShop()       # make the composite
    scene.order('Homer')      # simulate Homer's order
    print '...'
    scene.order('Shaggy')     # simulate Shaggy's order


C:\python\examples> python pizzashop.py
Homer orders from <Employee: name=Pat, salary=40000>
Bob makes pizza
oven bakes
Homer pays for item to <Employee: name=Pat, salary=40000>
...
Shaggy orders from <Employee: name=Pat, salary=40000>
Bob makes pizza
oven bakes
Shaggy pays for item to <Employee: name=Pat, salary=40000>


** Page 174 *******************************************************************

import pickle
object = someClass()
file   = open(filename, 'w')        # create external file
pickle.dump(object, file)           # save object in file

file = open(filename, 'r')
object = pickle.load(file)          # fetch it back later


import shelve
object = someClass()
dbase = shelve.open('filename')
dbase['key'] = object            # save under key
...
object = dbase['key']            # fetch it back later


** Page 175 *******************************************************************

# file trace.py

class wrapper:
    def __init__(self, object):
        self.wrapped = object          # save object
    def __getattr__(self, attrname):
        print 'Trace:', attrname                  # trace fetch
        return getattr(self.wrapped, attrname)    # delegate fetch

>>> from trace import wrapper
>>> x = wrapper([1,2,3])           # wrap a list
>>> x.append(4)                    # delegate to list method
Trace: append
>>> x.wrapped                      # print my member
[1, 2, 3, 4]

>>> x = wrapper({"a": 1, "b": 2})  # wrap a dictionary
>>> x.keys()                       # delegate to dictionary method
Trace: keys
['a', 'b']


# file set.py

class Set:
    def __init__(self, value = []):      # constructor
        self.data = []                   # manages a list
        self.concat(value)

    def intersect(self, other):          # other is any sequence
        res = []                         # self is the subject
        for x in self.data:
            if x in other:               # pick common items
                res.append(x)
        return Set(res)                  # return a new Set

    def union(self, other):              # other is any sequence
        res = self.data[:]               # copy of my list
        for x in other:                  # add items in other
            if not x in res:
                res.append(x)
        return Set(res)

    def concat(self, value):             # value: list, Set...
        for x in value:                  # removes duplicates
            if not x in self.data:
                self.data.append(x)

    def __len__(self): return len(self.data)                 # on len(self)
    def __getitem__(self, key): return self.data[key]        # on self[i]
    def __and__(self, other): return self.intersect(other)   # on self & other
    def __or__(self, other): return self.union(other)        # on self | other
    def __repr__(self): return 'Set:' + `self.data`          # on print


** Page 177 *******************************************************************

>>> class Spam:
...     def __init__(self): # no __repr__
...         self.data1 = "food"
...
>>> X = Spam()
>>> print X # default format: class, address
<Spam instance at 87f1b0>


# file mytools.py

# Lister can be mixed-in to any class, to
# provide a formatted print of instances
# via inheritance of __repr__ coded here;
# self is the instance of the lowest class;

class Lister:
    def __repr__(self):
        return ("<Instance of %s, address %s:\n%s>" %
                          (self.__class__.__name__,       # my class's name
                           id(self),                      # my address
                           self.attrnames()) )            # name=value list
    def attrnames(self):
        result = ''
        for attr in self.__dict__.keys():      # scan instance namespace dict
            if attr[:2] == '__':
                result = result + "\tname %s=<built-in>\n" % attr
            else:
                result = result + "\tname %s=%s\n" % (attr, self.__dict__[attr])
        return result


# file testmixin.py

from mytools import Lister      # get tool class

class Super:
    def __init__(self):         # superclass __init__
        self.data1 = "spam"

class Sub(Super, Lister):       # mix-in a __repr__
    def __init__(self):         # Lister has access to self
        Super.__init__(self)
        self.data2 = "eggs"     # more instance attrs
        self.data3 = 42

if __name__ == "__main__":
    X = Sub()
    print X      # mixed-in repr


C:\python\examples> python testmixin.py
<Instance of Sub, address 7833392:
        name data3=42
        name data2=eggs
        name data1=spam
>


>>> from mytools import Lister
>>> class x(Lister):
...     pass
...
>>> t = x()
>>> t.a = 1; t.b = 2; t.c = 3
>>> t
<Instance of x, address 7797696:
        name b=2
        name a=1
        name c=3
>


** Page 179 *******************************************************************

def factory(aClass, *args):         # varargs tuple
    return apply(aClass, args)      # call aClass

class Spam:
    def doit(self, message):
        print message

class Person:
    def __init__(self, name, job):
        self.name = name
        self.job = job

object1 = factory(Spam)                      # make a Spam
object2 = factory(Person, "Guido", "guru")   # make a Person

def factory(aClass, *args, **kwargs):       # +kwargs dict
    return apply(aClass, args, kwargs)      # call aClass


** Page 180 *******************************************************************

class Spam:
    def doit(self, message):
        print message

object1 = Spam()
x = object1.doit       # bound method object
x('hello world')       # instance is implied

t = Spam.doit          # unbound method object
t(object1, 'howdy')    # pass in instance


** Page 182 *******************************************************************

# file docstr.py

"I am: docstr.__doc__"

class spam:
    "I am: spam.__doc__ or docstr.spam.__doc__"
    
    def method(self, arg):
        "I am: spam.method.__doc__ or self.method.__doc__"
        pass

def func(args):
    "I am: docstr.func.__doc__"
    pass


>>> import docstr
>>> docstr.__doc__
'I am: docstr.__doc__'

>>> docstr.spam.__doc__
'I am: spam.__doc__ or docstr.spam.__doc__'

>>> docstr.spam.method.__doc__
'I am: spam.method.__doc__ or self.method.__doc__'

>>> docstr.func.__doc__
'I am: docstr.func.__doc__'


** Page 183 *******************************************************************

>>> class X:
...     a = 1     # class attribute
...

>>> I = X()
>>> I.a           # inherited by instance
1
>>> X.a
1

>>> X.a = 2       # may change more than X
>>> I.a           # I changes too
2
>>> J = X()       # J inherits from X's runtime values
>>> J.a           # (but assigning to J.a changes a in J, not X or I)
2


class X: pass       # make a few attribute namespaces
class Y: pass

X.a = 1             # use class attributes as variables
X.b = 2             # no instances anywhere to be found
X.c = 3
Y.a = X.a + X.b + X.c

for X.i in range(Y.a): print X.i   # prints 0..5


>>> class Record: pass
...
>>> X = Record()
>>> X.name = 'bob'
>>> X.job  = 'Pizza maker'


** Page 185 *******************************************************************

class Lister:
    def __repr__(self): ...
    def other(self): ...

class Super:
    def __repr__(self): ...
    def other(self): ...

class Sub(Super, Lister):    # pick up Super's __repr__, by listing it first
    other = Lister.other     # but explicitly pick up Lister's version of other
    def __init__(self):
        ...


class Spam:
    numInstances = 0
    def __init__(self):
        Spam.numInstances = Spam.numInstances + 1
    def printNumInstances():
        print "Number of instances created: ", Spam.numInstances

>>> from spam import *
>>> a = Spam()
>>> b = Spam()
>>> c = Spam()
>>> Spam.printNumInstances()
Traceback (innermost last):
  File "<stdin>", line 1, in ?
TypeError: unbound method must be called with class instance 1st argument


def printNumInstances():
    print "Number of instances created: ", Spam.numInstances

class Spam:
    numInstances = 0
    def __init__(self):
        Spam.numInstances = Spam.numInstances + 1

>>> import spam
>>> a = spam.Spam()
>>> b = spam.Spam()
>>> c = spam.Spam()
>>> spam.printNumInstances()
Number of instances created: 3


class Spam:
    numInstances = 0
    def __init__(self):
        Spam.numInstances = Spam.numInstances + 1
    def printNumInstances(self):
        print "Number of instances created: ", Spam.numInstances

>>> from spam import Spam
>>> a, b, c = Spam(), Spam(), Spam()
>>> a.printNumInstances()
Number of instances created: 3
>>> b.printNumInstances()
Number of instances created: 3
>>> Spam().printNumInstances()
Number of instances created: 4


** Page 187 *******************************************************************

# file nester.py

def generate():
    class Spam:
        count = 1
        def method(self):        # name Spam not visible:
            print Spam.count     # not local (def), global (module), built-in
        return Spam()

generate().method()

C:\python\examples> python nester.py
Traceback (innermost last):
...
NameError: Spam



def generate():
    global Spam                 # force Spam to module scope
    class Spam:
        count = 1
        def method(self):
            print Spam.count    # works: in global (enclosing module)
    return Spam()

generate().method()   # prints 1



def generate():
    return Spam()

class Spam:                  # define at module top-level
    count = 1
    def method(self):
        print Spam.count     # works: in global (enclosing module)

generate().method()



def generate():
    class Spam:
        count = 1
        def method(self):
            print self.__class__.count     # works: qualify to get class
    return Spam()

generate().method()



def generate():
    class Spam:
        count = 1
        fillin = [None]
        def method(self, klass=fillin):    # save from enclosing scope
            print klass[0].count           # works: default plugged-in
        Spam.fillin[0] = Spam
        return Spam()

generate().method()
