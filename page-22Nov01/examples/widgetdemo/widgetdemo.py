#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Jul 23, 2022 06:49:25 AM PDT  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import widgetdemo_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.map('TNotebook.Tab', background =
            [('selected', _bgcolor), ('active', _tabbg1),
            ('!active', _ana2color)], foreground =
            [('selected', _fgcolor), ('active', _tabfg1), ('!active',  _tabfg2)])
    style.map('TCheckbutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    style.map('TRadiobutton',background =
           [('selected', _bgcolor), ('active', _ana2color)], indicatorcolor =
           [('selected', _fgcolor), ('!active', _bgcolor)])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)

    global _images
    _images = (
         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                  KkoNUtRHpYYAADs= '''),
         tk.PhotoImage("img_close_white", data='''R0lGODlhDAAMAPQfAM3NzcjI
                yMbGxsLCwsDAwL29vbq6urKysrGxsa6urqmpqZ+fn56enpaWloSEhF9fX0ZGR
                j09PTMzMykpKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///yH
                5BAEKAB8ALAAAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+fkxBgPi
                BDwshCWHQfc5KkoNUtRHpYYAADs='''),
         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )
    if _bgmode == "dark":
        style.element_create("close", "image", "img_close_white",
           ('active', 'pressed',  'img_closepressed'),
           ('active', 'alternate', 'img_closeactive'), border=8, sticky='')
    else:
        style.element_create("close", "image", "img_close",
           ('active', 'pressed',  'img_closepressed'),
           ('active', 'alternate', 'img_closeactive'), border=8, sticky='')

    style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                 {"sticky": "nswe"})])
    style.layout("ClosetabNotebook.Tab", [
        ("ClosetabNotebook.tab",
          { "sticky": "nswe",
            "children": [
                ("ClosetabNotebook.padding", {
                    "side": "top",
                    "sticky": "nswe",
                    "children": [
                        ("ClosetabNotebook.focus", {
                            "side": "top",
                            "sticky": "nswe",
                            "children": [
                                ("ClosetabNotebook.label", {"side":
                                  "left", "sticky": ''}),
                                ("ClosetabNotebook.close", {"side":
                                    "left", "sticky": ''}),]})]})]})])

    style.map('ClosetabNotebook.Tab', background =
        [('selected', _bgcolor), ('active', _tabbg1),
        ('!active', _tabbg2)], foreground =
        [('selected', _fgcolor), ('active', _tabfg1), ('!active', _tabfg2)])
    _style_code_ran = 1

def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(widgetdemo_support.root, tearoff=0)
        Popupmenu1.configure(background=_bgcolor)
        Popupmenu1.configure(foreground=_fgcolor)
        Popupmenu1.configure(activebackground=_ana2color)
        Popupmenu1.configure(activeforeground='black')
        Popupmenu1.configure(font="TkMenuFont")
        Popupmenu1.add_command(command=lambda:widgetdemo_support.on_popCopy(args[0])
                ,label='Copy')
        Popupmenu1.add_command(command=lambda:widgetdemo_support.on_popPaste(args[0])
                ,label='Paste')
        Popupmenu1.add_command(command=lambda:widgetdemo_support.on_popClear(args[0])
                ,label='Clear')
        Popupmenu1.add_separator()
        Popupmenu1.add_command(command=lambda:widgetdemo_support.on_popExit(args[0])
                ,label='Exit')
        Popupmenu1.add_separator()
        Popupmenu1.add_command(command=lambda:widgetdemo_support.on_popCloseMenu(args[0])
                ,label='Close Menu')
        Popupmenu1.post(event.x_root, event.y_root)

class Main:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1353x700+22+64")
        top.minsize(120, 1)
        top.maxsize(2545, 1410)
        top.resizable(0,  0)
        top.title("PAGE 7.5 Widget Demo")
        top.configure(background="gray42")
        top.configure(highlightbackground="wheat")
        top.configure(highlightcolor="black")

        self.top = top
        self.CheckDisplay = tk.StringVar()
        self.RadioDisplay = tk.StringVar()
        self.EntryDisplay = tk.StringVar()
        self.EntryData = tk.StringVar()
        self.ListDisplay = tk.StringVar()
        self.SpinDisplay = tk.StringVar()
        self.SpinData = tk.StringVar()
        self.SpinData.set('0.0')
        self.btnAnimateText = tk.StringVar()
        self.MessageData = tk.StringVar()
        self.TCheckDisplay = tk.StringVar()
        self.TRadioDisplay = tk.StringVar()
        self.TEntryDisplay = tk.StringVar()
        self.TEntryData = tk.StringVar()
        self.TComboDisplay = tk.StringVar()
        self.combobox = tk.StringVar()
        self.TSpinDisplay = tk.StringVar()
        self.TSpinData = tk.StringVar()
        self.TSpinData.set('0')
        self.TBtnScaleAnimateText = tk.StringVar()
        self.TBtnProgText = tk.StringVar()
        self.ScrolledTextData = tk.StringVar()
        self.ListDisplay2 = tk.StringVar()
        self.IconName = tk.StringVar()
        self.CustomWidgetData = tk.StringVar()
        self.TimesToFlash = tk.StringVar()
        self.TimesToFlash.set('1.0')
        self.RepeatedCount = tk.StringVar()
        self.StatusTime = tk.StringVar()
        self.StatusInfo1 = tk.StringVar()
        self.StatusInfo2 = tk.StringVar()
        self.che50 = tk.IntVar()
        self.che51 = tk.IntVar()
        self.che52 = tk.IntVar()
        self.che53 = tk.IntVar()
        self.che54 = tk.IntVar()
        self.selectedButton = tk.IntVar()
        self.selectedButton3 = tk.IntVar()
        self.selectedButton4 = tk.IntVar()
        self.VScaleData = tk.DoubleVar()
        self.HScaleData = tk.DoubleVar()
        self.selectedButton2 = tk.IntVar()
        self.tch47 = tk.IntVar()
        self.tch48 = tk.IntVar()
        self.tch49 = tk.IntVar()
        self.TselectedButton = tk.IntVar()
        self.tch57 = tk.IntVar()
        self.tch58 = tk.IntVar()
        self.TVScaleData = tk.DoubleVar()
        self.THScaleData = tk.DoubleVar()
        self.tch61 = tk.IntVar()
        self.RptDelay = tk.DoubleVar()
        self.RptInterval = tk.DoubleVar()

        self.btnExit = tk.Button(self.top)
        self.btnExit.place(x=1250, y=11, height=33, width=93)
        self.btnExit.configure(activebackground="orange")
        self.btnExit.configure(command=widgetdemo_support.on_btnExit)
        self.btnExit.configure(compound='left')
        self.btnExit.configure(disabledforeground="#b8a786")
        self.btnExit.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.btnExit.configure(highlightbackground="wheat")
        self.btnExit.configure(pady="0")
        self.btnExit.configure(text='''Exit''')

        _style_code()
        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(x=-2, y=60, height=591, width=1358)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(0, text='''Standard Tk Widgets''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t1.configure(highlightbackground="wheat")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(1, text='''ttk Themed Widgets''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t2.configure(highlightbackground="wheat")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(2, text='''Enhanced Widgets''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t3.configure(highlightbackground="wheat")
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(3, text='''Special Twists on Normal Widgets'''
                ,compound="left", underline='''-1''', )
        self.TNotebook1_t4.configure(highlightbackground="wheat")

        self.Labelframe1 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe1.place(x=2, y=4, height=274, width=336)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe1.configure(text='''Checkbutton Widget''')
        self.Labelframe1.configure(highlightbackground="wheat")

        self.Label1 = tk.Label(self.Labelframe1)
        self.Label1.place(x=4, y=237, height=34, width=328, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#b8a786")
        self.Label1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label1.configure(highlightbackground="wheat")
        self.Label1.configure(relief="groove")
        self.Label1.configure(text='''Label''')
        self.Label1.configure(textvariable=self.CheckDisplay)
        self.CheckDisplay.set('''Label''')

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton1.place(x=17, y=30, height=23, width=227
                , bordermode='ignore')
        self.Checkbutton1.configure(activebackground="beige")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(command=lambda :widgetdemo_support.on_CheckClick(1))
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#b8a786")
        self.Checkbutton1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton1.configure(highlightbackground="wheat")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(selectcolor="#d9d9d9")
        self.Checkbutton1.configure(text='''Standard Checkbutton''')
        self.Checkbutton1.configure(variable=self.che50)

        self.Checkbutton2 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton2.place(x=23, y=60, height=23, width=207
                , bordermode='ignore')
        self.Checkbutton2.configure(activebackground="beige")
        self.Checkbutton2.configure(anchor='w')
        self.Checkbutton2.configure(borderwidth="0")
        self.Checkbutton2.configure(command=lambda :widgetdemo_support.on_CheckClick(2))
        self.Checkbutton2.configure(compound='left')
        self.Checkbutton2.configure(disabledforeground="#b8a786")
        self.Checkbutton2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton2.configure(highlightbackground="wheat")
        self.Checkbutton2.configure(highlightthickness="0")
        photo_location = os.path.join(_location,"./images/check-nu.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Checkbutton2.configure(image=_img0)
        self.Checkbutton2.configure(indicatoron="0")
        self.Checkbutton2.configure(justify='left')
        self.Checkbutton2.configure(offrelief="flat")
        self.Checkbutton2.configure(selectcolor="#d9d9d9")
        photo_location = os.path.join(_location,"./images/check-nc.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.Checkbutton2.configure(selectimage=_img1)
        self.Checkbutton2.configure(text='''Custom Checkbutton''')
        self.Checkbutton2.configure(variable=self.che51)

        self.Checkbutton3 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton3.place(x=30, y=90, height=33, width=77
                , bordermode='ignore')
        self.Checkbutton3.configure(activebackground="beige")
        self.Checkbutton3.configure(anchor='w')
        self.Checkbutton3.configure(command=lambda :widgetdemo_support.on_CheckClick(3))
        self.Checkbutton3.configure(disabledforeground="#b8a786")
        self.Checkbutton3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton3.configure(highlightbackground="wheat")
        photo_location = os.path.join(_location,"./images/switchoff75.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Checkbutton3.configure(image=_img2)
        self.Checkbutton3.configure(indicatoron="0")
        self.Checkbutton3.configure(justify='left')
        self.Checkbutton3.configure(offrelief="flat")
        self.Checkbutton3.configure(selectcolor="#d9d9d9")
        photo_location = os.path.join(_location,"./images/switchon75.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Checkbutton3.configure(selectimage=_img3)
        self.Checkbutton3.configure(text='''Check''')
        self.Checkbutton3.configure(variable=self.che52)

        self.Checkbutton4 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton4.place(x=20, y=133, height=33, width=187
                , bordermode='ignore')
        self.Checkbutton4.configure(activebackground="#f5f5dc")
        self.Checkbutton4.configure(background="red")
        self.Checkbutton4.configure(command=lambda :widgetdemo_support.on_CheckClick(4))
        self.Checkbutton4.configure(compound='left')
        self.Checkbutton4.configure(disabledforeground="#b8a786")
        self.Checkbutton4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton4.configure(highlightbackground="wheat")
        self.Checkbutton4.configure(indicatoron="0")
        self.Checkbutton4.configure(justify='left')
        self.Checkbutton4.configure(selectcolor="green")
        self.Checkbutton4.configure(text='''Sticky Button''')
        self.Checkbutton4.configure(variable=self.che53)

        self.Checkbutton5 = tk.Checkbutton(self.Labelframe1)
        self.Checkbutton5.place(x=17, y=182, height=23, width=217
                , bordermode='ignore')
        self.Checkbutton5.configure(activebackground="beige")
        self.Checkbutton5.configure(anchor='w')
        self.Checkbutton5.configure(command=lambda :widgetdemo_support.on_CheckClick(5))
        self.Checkbutton5.configure(compound='left')
        self.Checkbutton5.configure(disabledforeground="#b8a786")
        self.Checkbutton5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Checkbutton5.configure(highlightbackground="wheat")
        self.Checkbutton5.configure(justify='left')
        self.Checkbutton5.configure(selectcolor="#d9d9d9")
        self.Checkbutton5.configure(state='disabled')
        self.Checkbutton5.configure(text='''Disabled Checkbutton''')
        self.Checkbutton5.configure(variable=self.che54)

        self.Labelframe2 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe2.place(x=338, y=4, height=274, width=336)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe2.configure(text='''Radiobutton Widget''')
        self.Labelframe2.configure(highlightbackground="wheat")

        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(x=4, y=237, height=34, width=328, bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#b8a786")
        self.Label2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label2.configure(highlightbackground="wheat")
        self.Label2.configure(relief="groove")
        self.Label2.configure(text='''Label''')
        self.Label2.configure(textvariable=self.RadioDisplay)
        self.RadioDisplay.set('''Label''')

        self.Radiobutton1 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton1.place(x=20, y=30, height=23, width=248
                , bordermode='ignore')
        self.Radiobutton1.configure(activebackground="beige")
        self.Radiobutton1.configure(anchor='w')
        self.Radiobutton1.configure(command=lambda :widgetdemo_support.on_RadioClick(1))
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(cursor="fleur")
        self.Radiobutton1.configure(disabledforeground="#b8a786")
        self.Radiobutton1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton1.configure(highlightbackground="wheat")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(selectcolor="#d9d9d9")
        self.Radiobutton1.configure(text='''Standard Radiobutton''')
        self.Radiobutton1.configure(value='1')
        self.Radiobutton1.configure(variable=self.selectedButton)

        self.Radiobutton2 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton2.place(x=26, y=59, height=33, width=248
                , bordermode='ignore')
        self.Radiobutton2.configure(activebackground="beige")
        self.Radiobutton2.configure(anchor='w')
        self.Radiobutton2.configure(command=lambda :widgetdemo_support.on_RadioClick(2))
        self.Radiobutton2.configure(compound='left')
        self.Radiobutton2.configure(cursor="fleur")
        self.Radiobutton2.configure(disabledforeground="#b8a786")
        self.Radiobutton2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton2.configure(highlightbackground="wheat")
        self.Radiobutton2.configure(highlightthickness="0")
        photo_location = os.path.join(_location,"./images/radio-nu.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.Radiobutton2.configure(image=_img4)
        self.Radiobutton2.configure(indicatoron="0")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(offrelief="flat")
        self.Radiobutton2.configure(selectcolor="#d9d9d9")
        photo_location = os.path.join(_location,"./images/radio-nc.png")
        global _img5
        _img5 = tk.PhotoImage(file=photo_location)
        self.Radiobutton2.configure(selectimage=_img5)
        self.Radiobutton2.configure(text='''Custom Radiobutton 1''')
        self.Radiobutton2.configure(value='2')
        self.Radiobutton2.configure(variable=self.selectedButton)

        self.Radiobutton3 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton3.place(x=21, y=100, height=33, width=248
                , bordermode='ignore')
        self.Radiobutton3.configure(activebackground="beige")
        self.Radiobutton3.configure(anchor='w')
        self.Radiobutton3.configure(command=lambda :widgetdemo_support.on_RadioClick(3))
        self.Radiobutton3.configure(compound='left')
        self.Radiobutton3.configure(cursor="fleur")
        self.Radiobutton3.configure(disabledforeground="#b8a786")
        self.Radiobutton3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton3.configure(highlightbackground="wheat")
        self.Radiobutton3.configure(highlightthickness="0")
        photo_location = os.path.join(_location,"./images/radio-unchecked.png")
        global _img6
        _img6 = tk.PhotoImage(file=photo_location)
        self.Radiobutton3.configure(image=_img6)
        self.Radiobutton3.configure(indicatoron="0")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(offrelief="flat")
        self.Radiobutton3.configure(selectcolor="#d9d9d9")
        photo_location = os.path.join(_location,"./images/radio-checked.png")
        global _img7
        _img7 = tk.PhotoImage(file=photo_location)
        self.Radiobutton3.configure(selectimage=_img7)
        self.Radiobutton3.configure(text='''Custom Radiobutton 2''')
        self.Radiobutton3.configure(value='3')
        self.Radiobutton3.configure(variable=self.selectedButton)

        self.Radiobutton4 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton4.place(x=22, y=136, height=33, width=248
                , bordermode='ignore')
        self.Radiobutton4.configure(activebackground="beige")
        self.Radiobutton4.configure(anchor='w')
        self.Radiobutton4.configure(command=lambda :widgetdemo_support.on_RadioClick(4))
        self.Radiobutton4.configure(compound='left')
        self.Radiobutton4.configure(cursor="fleur")
        self.Radiobutton4.configure(disabledforeground="#b8a786")
        self.Radiobutton4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton4.configure(highlightbackground="wheat")
        self.Radiobutton4.configure(highlightthickness="0")
        photo_location = os.path.join(_location,"./images/RbDotUnselected20.png")
        global _img8
        _img8 = tk.PhotoImage(file=photo_location)
        self.Radiobutton4.configure(image=_img8)
        self.Radiobutton4.configure(indicatoron="0")
        self.Radiobutton4.configure(justify='left')
        self.Radiobutton4.configure(offrelief="flat")
        self.Radiobutton4.configure(selectcolor="#d9d9d9")
        photo_location = os.path.join(_location,"./images/RbDotSelected20.png")
        global _img9
        _img9 = tk.PhotoImage(file=photo_location)
        self.Radiobutton4.configure(selectimage=_img9)
        self.Radiobutton4.configure(text='''Custom Radiobutton 3''')
        self.Radiobutton4.configure(value='4')
        self.Radiobutton4.configure(variable=self.selectedButton)

        self.Radiobutton5 = tk.Radiobutton(self.Labelframe2)
        self.Radiobutton5.place(x=20, y=177, height=23, width=248
                , bordermode='ignore')
        self.Radiobutton5.configure(activebackground="beige")
        self.Radiobutton5.configure(anchor='w')
        self.Radiobutton5.configure(command=lambda :widgetdemo_support.on_RadioClick(5))
        self.Radiobutton5.configure(compound='left')
        self.Radiobutton5.configure(cursor="fleur")
        self.Radiobutton5.configure(disabledforeground="#b8a786")
        self.Radiobutton5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton5.configure(highlightbackground="wheat")
        self.Radiobutton5.configure(justify='left')
        self.Radiobutton5.configure(selectcolor="#d9d9d9")
        self.Radiobutton5.configure(state='disabled')
        self.Radiobutton5.configure(text='''Disabled Radiobutton''')
        self.Radiobutton5.configure(value='5')
        self.Radiobutton5.configure(variable=self.selectedButton)

        self.Labelframe3 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe3.place(x=674, y=4, height=274, width=336)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe3.configure(text='''Entry Widget''')
        self.Labelframe3.configure(highlightbackground="wheat")

        self.Label3 = tk.Label(self.Labelframe3)
        self.Label3.place(x=4, y=237, height=34, width=328, bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#b8a786")
        self.Label3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label3.configure(highlightbackground="wheat")
        self.Label3.configure(relief="groove")
        self.Label3.configure(text='''Label''')
        self.Label3.configure(textvariable=self.EntryDisplay)
        self.EntryDisplay.set('''Label''')

        self.Entry1 = tk.Entry(self.Labelframe3)
        self.Entry1.place(x=10, y=30, height=23, width=296, bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#b8a786")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(highlightbackground="wheat")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(textvariable=self.EntryData)
        if (widgetdemo_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.Entry1.bind('<Control-1>', lambda e: popup1(e))
            self.Entry1.bind('<Button-3>', lambda e: popup1(e))
        else:
            self.Entry1.bind('<Button-3>', lambda e: popup1(e))

        self.Label6 = tk.Label(self.Labelframe3)
        self.Label6.place(x=64, y=96, height=81, width=208, bordermode='ignore')
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(anchor='w')
        self.Label6.configure(compound='left')
        self.Label6.configure(disabledforeground="#b8a786")
        self.Label6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label6.configure(highlightbackground="wheat")
        self.Label6.configure(text='''Type something into the Entry Widget above and press <Return> OR Mouse Button-3 to see Context Menu.''')
        self.Label6.configure(wraplength="190")

        self.Labelframe4 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe4.place(x=1010, y=4, height=274, width=336)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe4.configure(text='''Listbox Widget''')
        self.Labelframe4.configure(highlightbackground="wheat")

        self.Label4 = tk.Label(self.Labelframe4)
        self.Label4.place(x=4, y=237, height=34, width=328, bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#b8a786")
        self.Label4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label4.configure(highlightbackground="wheat")
        self.Label4.configure(relief="groove")
        self.Label4.configure(text='''Label''')
        self.Label4.configure(textvariable=self.ListDisplay)
        self.ListDisplay.set('''Label''')

        self.Listbox1 = tk.Listbox(self.Labelframe4)
        self.Listbox1.place(x=20, y=30, height=126, width=144
                , bordermode='ignore')
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#b8a786")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(highlightbackground="wheat")
        self.Listbox1.configure(selectbackground="#c4c4c4")

        self.Labelframe9 = tk.LabelFrame(self.Labelframe4)
        self.Labelframe9.place(x=176, y=20, height=95, width=130
                , bordermode='ignore')
        self.Labelframe9.configure(relief='groove')
        self.Labelframe9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe9.configure(text='''Active Style''')
        self.Labelframe9.configure(highlightbackground="wheat")

        self.Radiobutton9 = tk.Radiobutton(self.Labelframe9)
        self.Radiobutton9.place(x=3, y=19, height=23, width=88
                , bordermode='ignore')
        self.Radiobutton9.configure(activebackground="beige")
        self.Radiobutton9.configure(anchor='w')
        self.Radiobutton9.configure(command=widgetdemo_support.on_LBActiveStyle)
        self.Radiobutton9.configure(compound='left')
        self.Radiobutton9.configure(disabledforeground="#b8a786")
        self.Radiobutton9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton9.configure(highlightbackground="wheat")
        self.Radiobutton9.configure(justify='left')
        self.Radiobutton9.configure(selectcolor="#d9d9d9")
        self.Radiobutton9.configure(text='''Dotbox''')
        self.Radiobutton9.configure(value='1')
        self.Radiobutton9.configure(variable=self.selectedButton3)

        self.Radiobutton10 = tk.Radiobutton(self.Labelframe9)
        self.Radiobutton10.place(x=3, y=42, height=23, width=106
                , bordermode='ignore')
        self.Radiobutton10.configure(activebackground="beige")
        self.Radiobutton10.configure(anchor='w')
        self.Radiobutton10.configure(command=widgetdemo_support.on_LBActiveStyle)
        self.Radiobutton10.configure(compound='left')
        self.Radiobutton10.configure(disabledforeground="#b8a786")
        self.Radiobutton10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton10.configure(highlightbackground="wheat")
        self.Radiobutton10.configure(justify='left')
        self.Radiobutton10.configure(selectcolor="#d9d9d9")
        self.Radiobutton10.configure(text='''Underline''')
        self.Radiobutton10.configure(value='2')
        self.Radiobutton10.configure(variable=self.selectedButton3)

        self.Radiobutton11 = tk.Radiobutton(self.Labelframe9)
        self.Radiobutton11.place(x=3, y=66, height=23, width=98
                , bordermode='ignore')
        self.Radiobutton11.configure(activebackground="beige")
        self.Radiobutton11.configure(anchor='w')
        self.Radiobutton11.configure(command=widgetdemo_support.on_LBActiveStyle)
        self.Radiobutton11.configure(compound='left')
        self.Radiobutton11.configure(disabledforeground="#b8a786")
        self.Radiobutton11.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton11.configure(highlightbackground="wheat")
        self.Radiobutton11.configure(justify='left')
        self.Radiobutton11.configure(selectcolor="#d9d9d9")
        self.Radiobutton11.configure(text='''None''')
        self.Radiobutton11.configure(value='3')
        self.Radiobutton11.configure(variable=self.selectedButton3)

        self.Labelframe10 = tk.LabelFrame(self.Labelframe4)
        self.Labelframe10.place(x=176, y=116, height=115, width=150
                , bordermode='ignore')
        self.Labelframe10.configure(relief='groove')
        self.Labelframe10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe10.configure(text='''SelectMode''')
        self.Labelframe10.configure(highlightbackground="wheat")

        self.Radiobutton12 = tk.Radiobutton(self.Labelframe10)
        self.Radiobutton12.place(x=3, y=20, height=23, width=103
                , bordermode='ignore')
        self.Radiobutton12.configure(activebackground="beige")
        self.Radiobutton12.configure(anchor='w')
        self.Radiobutton12.configure(command=widgetdemo_support.on_LBSelectMode)
        self.Radiobutton12.configure(compound='left')
        self.Radiobutton12.configure(disabledforeground="#b8a786")
        self.Radiobutton12.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton12.configure(highlightbackground="wheat")
        self.Radiobutton12.configure(justify='left')
        self.Radiobutton12.configure(selectcolor="#d9d9d9")
        self.Radiobutton12.configure(text='''Single''')
        self.Radiobutton12.configure(value='1')
        self.Radiobutton12.configure(variable=self.selectedButton4)

        self.Radiobutton13 = tk.Radiobutton(self.Labelframe10)
        self.Radiobutton13.place(x=3, y=40, height=23, width=103
                , bordermode='ignore')
        self.Radiobutton13.configure(activebackground="beige")
        self.Radiobutton13.configure(anchor='w')
        self.Radiobutton13.configure(command=widgetdemo_support.on_LBSelectMode)
        self.Radiobutton13.configure(compound='left')
        self.Radiobutton13.configure(disabledforeground="#b8a786")
        self.Radiobutton13.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton13.configure(highlightbackground="wheat")
        self.Radiobutton13.configure(justify='left')
        self.Radiobutton13.configure(selectcolor="#d9d9d9")
        self.Radiobutton13.configure(text='''Browse''')
        self.Radiobutton13.configure(value='2')
        self.Radiobutton13.configure(variable=self.selectedButton4)

        self.Radiobutton14 = tk.Radiobutton(self.Labelframe10)
        self.Radiobutton14.place(x=3, y=60, height=23, width=103
                , bordermode='ignore')
        self.Radiobutton14.configure(activebackground="beige")
        self.Radiobutton14.configure(anchor='w')
        self.Radiobutton14.configure(command=widgetdemo_support.on_LBSelectMode)
        self.Radiobutton14.configure(compound='left')
        self.Radiobutton14.configure(disabledforeground="#b8a786")
        self.Radiobutton14.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton14.configure(highlightbackground="wheat")
        self.Radiobutton14.configure(justify='left')
        self.Radiobutton14.configure(selectcolor="#d9d9d9")
        self.Radiobutton14.configure(text='''Multiple''')
        self.Radiobutton14.configure(value='3')
        self.Radiobutton14.configure(variable=self.selectedButton4)

        self.Radiobutton15 = tk.Radiobutton(self.Labelframe10)
        self.Radiobutton15.place(x=3, y=82, height=23, width=103
                , bordermode='ignore')
        self.Radiobutton15.configure(activebackground="beige")
        self.Radiobutton15.configure(anchor='w')
        self.Radiobutton15.configure(command=widgetdemo_support.on_LBSelectMode)
        self.Radiobutton15.configure(compound='left')
        self.Radiobutton15.configure(disabledforeground="#b8a786")
        self.Radiobutton15.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton15.configure(highlightbackground="wheat")
        self.Radiobutton15.configure(justify='left')
        self.Radiobutton15.configure(selectcolor="#d9d9d9")
        self.Radiobutton15.configure(text='''Extended''')
        self.Radiobutton15.configure(value='4')
        self.Radiobutton15.configure(variable=self.selectedButton4)

        self.Labelframe5 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe5.place(x=2, y=277, height=274, width=336)
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe5.configure(text='''Scales & Spinbox Widgets''')
        self.Labelframe5.configure(highlightbackground="wheat")

        self.Label5 = tk.Label(self.Labelframe5)
        self.Label5.place(x=4, y=237, height=34, width=328, bordermode='ignore')
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#b8a786")
        self.Label5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label5.configure(highlightbackground="wheat")
        self.Label5.configure(relief="groove")
        self.Label5.configure(text='''Label''')
        self.Label5.configure(textvariable=self.SpinDisplay)
        self.SpinDisplay.set('''Label''')

        self.Scale1 =  tk.Scale(self.Labelframe5, from_=0.0, to=10.0, resolution=1.0)
        self.Scale1.place(x=10, y=30, height=174, width=49)
        self.Scale1.configure(activebackground="beige")
        self.Scale1.configure(command=widgetdemo_support.on_VScale)
        self.Scale1.configure(highlightbackground="wheat")
        self.Scale1.configure(length="174")
        self.Scale1.configure(troughcolor="#d9d9d9")
        self.Scale1.configure(variable=self.VScaleData)

        self.Scale2 =  tk.Scale(self.Labelframe5, from_=0.0, to=10.0, resolution=1.0)
        self.Scale2.place(x=80, y=40, height=42, width=224)
        self.Scale2.configure(activebackground="beige")
        self.Scale2.configure(command=widgetdemo_support.on_HScale)
        self.Scale2.configure(highlightbackground="wheat")
        self.Scale2.configure(length="224")
        self.Scale2.configure(orient="horizontal")
        self.Scale2.configure(troughcolor="#d9d9d9")
        self.Scale2.configure(variable=self.HScaleData)

        self.Spinbox1 = tk.Spinbox(self.Labelframe5, from_=0.0, to=10.0)
        self.Spinbox1.place(x=120, y=110, height=23, width=118
                , bordermode='ignore')
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="wheat")
        self.Spinbox1.configure(command=widgetdemo_support.on_Spin)
        self.Spinbox1.configure(disabledforeground="#b8a786")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(textvariable=self.SpinData)

        self.Button1 = tk.Button(self.Labelframe5)
        self.Button1.place(x=110, y=160, height=53, width=123
                , bordermode='ignore')
        self.Button1.configure(activebackground="beige")
        self.Button1.configure(command=widgetdemo_support.on_ScaleAnimate)
        self.Button1.configure(compound='left')
        self.Button1.configure(disabledforeground="#b8a786")
        self.Button1.configure(highlightbackground="wheat")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''')
        self.Button1.configure(textvariable=self.btnAnimateText)
        self.btnAnimateText.set('''Button''')

        self.Labelframe6 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe6.place(x=338, y=277, height=274, width=336)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe6.configure(text='''Message Widget''')
        self.Labelframe6.configure(highlightbackground="wheat")

        self.Frame1 = tk.Frame(self.Labelframe6)
        self.Frame1.place(x=4, y=237, height=34, width=328, bordermode='ignore')
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(highlightbackground="wheat")

        self.Radiobutton6 = tk.Radiobutton(self.Frame1)
        self.Radiobutton6.place(x=21, y=7, height=23, width=78)
        self.Radiobutton6.configure(activebackground="beige")
        self.Radiobutton6.configure(anchor='w')
        self.Radiobutton6.configure(command=widgetdemo_support.on_MsgJustify)
        self.Radiobutton6.configure(compound='left')
        self.Radiobutton6.configure(disabledforeground="#b8a786")
        self.Radiobutton6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton6.configure(highlightbackground="wheat")
        self.Radiobutton6.configure(justify='left')
        self.Radiobutton6.configure(selectcolor="#d9d9d9")
        self.Radiobutton6.configure(text='''Left''')
        self.Radiobutton6.configure(value='1')
        self.Radiobutton6.configure(variable=self.selectedButton2)

        self.Radiobutton7 = tk.Radiobutton(self.Frame1)
        self.Radiobutton7.place(x=120, y=7, height=23, width=88)
        self.Radiobutton7.configure(activebackground="beige")
        self.Radiobutton7.configure(anchor='w')
        self.Radiobutton7.configure(command=widgetdemo_support.on_MsgJustify)
        self.Radiobutton7.configure(compound='left')
        self.Radiobutton7.configure(disabledforeground="#b8a786")
        self.Radiobutton7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton7.configure(highlightbackground="wheat")
        self.Radiobutton7.configure(justify='left')
        self.Radiobutton7.configure(selectcolor="#d9d9d9")
        self.Radiobutton7.configure(text='''Center''')
        self.Radiobutton7.configure(value='2')
        self.Radiobutton7.configure(variable=self.selectedButton2)

        self.Radiobutton8 = tk.Radiobutton(self.Frame1)
        self.Radiobutton8.place(x=229, y=7, height=23, width=78)
        self.Radiobutton8.configure(activebackground="beige")
        self.Radiobutton8.configure(anchor='w')
        self.Radiobutton8.configure(command=widgetdemo_support.on_MsgJustify)
        self.Radiobutton8.configure(compound='left')
        self.Radiobutton8.configure(disabledforeground="#b8a786")
        self.Radiobutton8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Radiobutton8.configure(highlightbackground="wheat")
        self.Radiobutton8.configure(justify='left')
        self.Radiobutton8.configure(selectcolor="#d9d9d9")
        self.Radiobutton8.configure(text='''Right''')
        self.Radiobutton8.configure(value='3')
        self.Radiobutton8.configure(variable=self.selectedButton2)

        self.Message1 = tk.Message(self.Labelframe6)
        self.Message1.place(x=10, y=20, height=201, width=312
                , bordermode='ignore')
        self.Message1.configure(borderwidth="2")
        self.Message1.configure(highlightbackground="wheat")
        self.Message1.configure(padx="0")
        self.Message1.configure(pady="1")
        self.Message1.configure(relief="groove")
        self.Message1.configure(text='''Message''')
        self.Message1.configure(textvariable=self.MessageData)
        self.MessageData.set('''Message''')
        self.Message1.configure(width=312)

        self.Labelframe7 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe7.place(x=674, y=277, height=274, width=336)
        self.Labelframe7.configure(relief='groove')
        self.Labelframe7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe7.configure(text='''Canvas Widget''')
        self.Labelframe7.configure(highlightbackground="wheat")

        self.Canvas1 = tk.Canvas(self.Labelframe7)
        self.Canvas1.place(x=2, y=20, height=248, width=329, bordermode='ignore')

        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="wheat")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")

        self.Labelframe8 = tk.LabelFrame(self.TNotebook1_t1)
        self.Labelframe8.place(x=1010, y=277, height=274, width=336)
        self.Labelframe8.configure(relief='groove')
        self.Labelframe8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe8.configure(text='''Text Widget''')
        self.Labelframe8.configure(highlightbackground="wheat")

        self.Text1 = tk.Text(self.Labelframe8)
        self.Text1.place(x=20, y=30, height=244, width=316, bordermode='ignore')
        self.Text1.configure(background="white")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(highlightbackground="wheat")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(wrap="word")

        self.TLabelframe1 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe1.place(x=2, y=4, height=274, width=336)
        self.TLabelframe1.configure(relief='')
        self.TLabelframe1.configure(text='''TCheckbutton''')

        self.TCheckbutton1 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton1.place(x=20, y=30, width=174, height=21
                , bordermode='ignore')
        self.TCheckbutton1.configure(variable=self.tch47)
        self.TCheckbutton1.configure(command=widgetdemo_support.on_TCheck)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''Tcheck Option 1''')
        self.TCheckbutton1.configure(compound='left')

        self.TCheckbutton2 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton2.place(x=20, y=70, width=144, height=21
                , bordermode='ignore')
        self.TCheckbutton2.configure(variable=self.tch48)
        self.TCheckbutton2.configure(command=widgetdemo_support.on_TCheck)
        self.TCheckbutton2.configure(takefocus="")
        self.TCheckbutton2.configure(text='''Tcheck Option 2''')
        self.TCheckbutton2.configure(compound='left')

        self.TCheckbutton3 = ttk.Checkbutton(self.TLabelframe1)
        self.TCheckbutton3.place(x=20, y=110, width=154, height=21
                , bordermode='ignore')
        self.TCheckbutton3.configure(variable=self.tch49)
        self.TCheckbutton3.configure(takefocus="")
        self.TCheckbutton3.configure(text='''Tcheck Disabled''')
        self.TCheckbutton3.configure(compound='left')
        self.TCheckbutton3.configure(state='disabled')

        self.TLabel1 = ttk.Label(self.TLabelframe1)
        self.TLabel1.place(x=7, y=236, height=33, width=322, bordermode='ignore')

        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel1.configure(borderwidth="2")
        self.TLabel1.configure(relief="groove")
        self.TLabel1.configure(anchor='center')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(textvariable=self.TCheckDisplay)
        self.TCheckDisplay.set('''''')
        self.TLabel1.configure(compound='left')

        self.TLabelframe2 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe2.place(x=338, y=4, height=274, width=336)
        self.TLabelframe2.configure(relief='')
        self.TLabelframe2.configure(text='''TRadiobutton''')

        self.TLabel2 = ttk.Label(self.TLabelframe2)
        self.TLabel2.place(x=7, y=236, height=33, width=322, bordermode='ignore')

        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel2.configure(borderwidth="2")
        self.TLabel2.configure(relief="groove")
        self.TLabel2.configure(anchor='center')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(textvariable=self.TRadioDisplay)
        self.TRadioDisplay.set('''''')
        self.TLabel2.configure(compound='left')

        self.TRadiobutton1 = ttk.Radiobutton(self.TLabelframe2)
        self.TRadiobutton1.place(x=20, y=30, width=127, height=21
                , bordermode='ignore')
        self.TRadiobutton1.configure(variable=self.TselectedButton)
        self.TRadiobutton1.configure(command=widgetdemo_support.on_TRadio)
        self.TRadiobutton1.configure(text='''TRadio Option 1''')
        self.TRadiobutton1.configure(compound='left')

        self.TRadiobutton2 = ttk.Radiobutton(self.TLabelframe2)
        self.TRadiobutton2.place(x=20, y=70, width=127, height=21
                , bordermode='ignore')
        self.TRadiobutton2.configure(variable=self.TselectedButton)
        self.TRadiobutton2.configure(value='2')
        self.TRadiobutton2.configure(command=widgetdemo_support.on_TRadio)
        self.TRadiobutton2.configure(text='''TRadio Option 2''')
        self.TRadiobutton2.configure(compound='left')

        self.TRadiobutton3 = ttk.Radiobutton(self.TLabelframe2)
        self.TRadiobutton3.place(x=20, y=110, width=127, height=21
                , bordermode='ignore')
        self.TRadiobutton3.configure(variable=self.TselectedButton)
        self.TRadiobutton3.configure(value='3')
        self.TRadiobutton3.configure(text='''TRadio Disabled''')
        self.TRadiobutton3.configure(compound='left')
        self.TRadiobutton3.configure(state='disabled')

        self.TLabelframe3 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe3.place(x=674, y=4, height=274, width=336)
        self.TLabelframe3.configure(relief='')
        self.TLabelframe3.configure(text='''TEntry Widget''')

        self.TLabel3 = ttk.Label(self.TLabelframe3)
        self.TLabel3.place(x=7, y=234, height=33, width=322, bordermode='ignore')

        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel3.configure(borderwidth="2")
        self.TLabel3.configure(relief="groove")
        self.TLabel3.configure(anchor='center')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(textvariable=self.TEntryDisplay)
        self.TEntryDisplay.set('''''')
        self.TLabel3.configure(compound='left')

        self.TEntry1 = ttk.Entry(self.TLabelframe3)
        self.TEntry1.place(x=20, y=30, height=21, width=294, bordermode='ignore')

        self.TEntry1.configure(textvariable=self.TEntryData)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")
        if (widgetdemo_support.root.tk.call('tk', 'windowingsystem')=='aqua'):
            self.TEntry1.bind('<Control-1>', lambda e: popup1(e))
            self.TEntry1.bind('<Button-3>', lambda e: popup1(e))
        else:
            self.TEntry1.bind('<Button-3>', lambda e: popup1(e))

        self.TLabel6 = ttk.Label(self.TLabelframe3)
        self.TLabel6.place(x=40, y=80, height=70, width=247, bordermode='ignore')

        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(wraplength="245")
        self.TLabel6.configure(text='''Type something into the Entry Widget above and press <Return> OR Mouse Button-3 to see Context Menu.''')
        self.TLabel6.configure(compound='left')

        self.TLabelframe4 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe4.place(x=1010, y=4, height=274, width=336)
        self.TLabelframe4.configure(relief='')
        self.TLabelframe4.configure(text='''TCombobox''')

        self.TLabel4 = ttk.Label(self.TLabelframe4)
        self.TLabel4.place(x=7, y=236, height=33, width=322, bordermode='ignore')

        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel4.configure(borderwidth="2")
        self.TLabel4.configure(relief="groove")
        self.TLabel4.configure(anchor='center')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(textvariable=self.TComboDisplay)
        self.TComboDisplay.set('''''')
        self.TLabel4.configure(compound='left')

        self.TCombobox1 = ttk.Combobox(self.TLabelframe4)
        self.TCombobox1.place(x=60, y=56, height=21, width=177
                , bordermode='ignore')
        self.TCombobox1.configure(textvariable=self.combobox)
        self.TCombobox1.configure(takefocus="")

        self.TCheckbutton4 = ttk.Checkbutton(self.TLabelframe4)
        self.TCheckbutton4.place(x=50, y=98, width=224, height=21
                , bordermode='ignore')
        self.TCheckbutton4.configure(variable=self.tch57)
        self.TCheckbutton4.configure(command=widgetdemo_support.on_FixLabelBackgrounds)
        self.TCheckbutton4.configure(takefocus="")
        self.TCheckbutton4.configure(text='''Fix Label Backgrounds''')
        self.TCheckbutton4.configure(compound='left')

        self.TCheckbutton5 = ttk.Checkbutton(self.TLabelframe4)
        self.TCheckbutton5.place(x=50, y=136, width=213, height=21
                , bordermode='ignore')
        self.TCheckbutton5.configure(variable=self.tch58)
        self.TCheckbutton5.configure(command=widgetdemo_support.on_TChkForceBorders)
        self.TCheckbutton5.configure(takefocus="")
        self.TCheckbutton5.configure(text='''Force TLabelframe borders on''')
        self.TCheckbutton5.configure(compound='left')

        self.TLabel7 = ttk.Label(self.TLabelframe4)
        self.TLabel7.place(x=60, y=170, height=36, width=220
                , bordermode='ignore')
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(wraplength="220")
        self.TLabel7.configure(text='''See the README for information on these options''')
        self.TLabel7.configure(compound='left')

        self.TLabel8 = ttk.Label(self.TLabelframe4)
        self.TLabel8.place(x=50, y=30, height=19, width=204, bordermode='ignore')

        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='w')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''Select Style/Theme to use:''')
        self.TLabel8.configure(compound='left')

        self.TLabelframe5 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe5.place(x=2, y=277, height=274, width=336)
        self.TLabelframe5.configure(relief='')
        self.TLabelframe5.configure(text='''TScales & TSpinbox''')

        self.TLabel5 = ttk.Label(self.TLabelframe5)
        self.TLabel5.place(x=7, y=236, height=33, width=322, bordermode='ignore')

        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel5.configure(borderwidth="2")
        self.TLabel5.configure(relief="groove")
        self.TLabel5.configure(anchor='center')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(textvariable=self.TSpinDisplay)
        self.TSpinDisplay.set('''''')
        self.TLabel5.configure(compound='left')

        self.TScale1 = ttk.Scale(self.TLabelframe5, from_=0, to=10.0)
        self.TScale1.place(x=30, y=40, height=150, width=17)
        self.TScale1.configure(command=widgetdemo_support.on_TVScale)
        self.TScale1.configure(variable=self.TVScaleData)
        self.TScale1.configure(orient="vertical")
        self.TScale1.configure(length="150")
        self.TScale1.configure(takefocus="")

        self.TScale2 = ttk.Scale(self.TLabelframe5, from_=0, to=10.0)
        self.TScale2.place(x=90, y=30, height=17, width=170)
        self.TScale2.configure(command=widgetdemo_support.on_THScale)
        self.TScale2.configure(variable=self.THScaleData)
        self.TScale2.configure(length="170")
        self.TScale2.configure(takefocus="")

        self.TSpinbox1 = ttk.Spinbox(self.TLabelframe5, from_=0, to=10)
        self.TSpinbox1.place(x=90, y=79, height=20, width=145
                , bordermode='ignore')
        self.TSpinbox1.configure(command=widgetdemo_support.on_TSpin)
        self.TSpinbox1.configure(wrap="1")
        self.TSpinbox1.configure(exportselection="0")
        self.TSpinbox1.configure(textvariable=self.TSpinData)
        self.TSpinData.set('''TSpinData''')
        self.TSpinbox1.configure(background="white")
        self.TSpinbox1.configure(takefocus="")

        self.TButton1 = ttk.Button(self.TLabelframe5)
        self.TButton1.place(x=90, y=130, height=68, width=193
                , bordermode='ignore')
        self.TButton1.configure(command=widgetdemo_support.on_TSpinAnimate)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(textvariable=self.TBtnScaleAnimateText)
        self.TBtnScaleAnimateText.set('''''')
        self.TButton1.configure(compound='left')

        self.TLabelframe6 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe6.place(x=338, y=277, height=274, width=336)
        self.TLabelframe6.configure(relief='')
        self.TLabelframe6.configure(text='''TProgressbar''')

        self.TProgressbar1 = ttk.Progressbar(self.TLabelframe6)
        self.TProgressbar1.place(x=70, y=30, width=190, height=19
                , bordermode='ignore')
        self.TProgressbar1.configure(length="190")

        self.TCheckbutton6 = ttk.Checkbutton(self.TLabelframe6)
        self.TCheckbutton6.place(x=70, y=80, width=151, height=21
                , bordermode='ignore')
        self.TCheckbutton6.configure(variable=self.tch61)
        self.TCheckbutton6.configure(command=widgetdemo_support.on_TProgCheck)
        self.TCheckbutton6.configure(takefocus="")
        self.TCheckbutton6.configure(text='''Indeterminate Mode''')
        self.TCheckbutton6.configure(compound='left')

        self.TBtnProgAnimate = ttk.Button(self.TLabelframe6)
        self.TBtnProgAnimate.place(x=70, y=130, height=68, width=193
                , bordermode='ignore')
        self.TBtnProgAnimate.configure(command=widgetdemo_support.on_TProgAnimate)
        self.TBtnProgAnimate.configure(takefocus="")
        self.TBtnProgAnimate.configure(textvariable=self.TBtnProgText)
        self.TBtnProgText.set('''''')
        self.TBtnProgAnimate.configure(compound='left')

        self.TLabelframe7 = ttk.Labelframe(self.TNotebook1_t2)
        self.TLabelframe7.place(x=674, y=277, height=274, width=674)
        self.TLabelframe7.configure(relief='')
        self.TLabelframe7.configure(text='''TPanedWindows''')

        self.TPanedwindow1 = ttk.Panedwindow(self.TLabelframe7
                , orient="horizontal")
        self.TPanedwindow1.place(x=10, y=20, height=240, width=655
                , bordermode='ignore')
        self.TPanedwindow1_p1 = ttk.Labelframe(self.TPanedwindow1, width=165
                , text='Pane 1')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)
        self.TPanedwindow1_p1.configure(text='''Pane 1''')
        self.TPanedwindow1_p2 = ttk.Labelframe(self.TPanedwindow1, text='Pane 2')

        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.TPanedwindow1_p2.configure(text='''Pane 2''')
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.TLabel9 = ttk.Label(self.TPanedwindow1_p1)
        self.TLabel9.place(x=10, y=80, height=19, width=142, bordermode='ignore')

        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='w')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Pane 1 - Panel 1''')
        self.TLabel9.configure(compound='left')

        self.TPanedwindow2 = ttk.Panedwindow(self.TPanedwindow1_p2
                , orient="vertical")
        self.TPanedwindow2.place(x=10, y=40, height=185, width=470
                , bordermode='ignore')
        self.TPanedwindow2_p1 = ttk.Labelframe(self.TPanedwindow2, height=75
                , text='Pane 1')
        self.TPanedwindow2.add(self.TPanedwindow2_p1, weight=0)
        self.TPanedwindow2_p1.configure(text='''Pane 1''')
        self.TPanedwindow2_p2 = ttk.Labelframe(self.TPanedwindow2, text='Pane 2')

        self.TPanedwindow2.add(self.TPanedwindow2_p2, weight=0)
        self.TPanedwindow2_p2.configure(text='''Pane 2''')
        self.__funcid1 = self.TPanedwindow2.bind('<Map>', self.__adjust_sash1)

        self.TLabel11 = ttk.Label(self.TPanedwindow2_p1)
        self.TLabel11.place(x=130, y=30, height=19, width=127
                , bordermode='ignore')
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='w')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Pane 1 - Panel 2''')
        self.TLabel11.configure(compound='left')

        self.TLabel12 = ttk.Label(self.TPanedwindow2_p2)
        self.TLabel12.place(x=130, y=50, height=19, width=127
                , bordermode='ignore')
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(anchor='w')
        self.TLabel12.configure(justify='left')
        self.TLabel12.configure(text='''Pane 2 - Panel 2''')
        self.TLabel12.configure(compound='left')

        self.TLabel10 = ttk.Label(self.TPanedwindow1_p2)
        self.TLabel10.place(x=140, y=20, height=19, width=132
                , bordermode='ignore')
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='w')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Pane 2 - Panel 1''')
        self.TLabel10.configure(compound='left')

        self.Labelframe11 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe11.place(x=2, y=3, height=274, width=336)
        self.Labelframe11.configure(relief='groove')
        self.Labelframe11.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe11.configure(text='''ScrolledEntry Widget''')
        self.Labelframe11.configure(highlightbackground="wheat")

        self.Scrolledentry1 = ScrolledEntry(self.Labelframe11)
        self.Scrolledentry1.place(x=20, y=30, height=35, width=296
                , bordermode='ignore')
        self.Scrolledentry1.configure(background="white")
        self.Scrolledentry1.configure(disabledforeground="#b8a786")
        self.Scrolledentry1.configure(exportselection="0")
        self.Scrolledentry1.configure(insertborderwidth="1")
        self.Scrolledentry1.configure(selectbackground="#c4c4c4")
        self.Scrolledentry1.configure(textvariable=self.ScrolledTextData)
        self.ScrolledTextData.set('''ScrolledTextData''')

        self.Labelframe12 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe12.place(x=338, y=3, height=274, width=336)
        self.Labelframe12.configure(relief='groove')
        self.Labelframe12.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe12.configure(text='''ScrolledListbox Widget''')
        self.Labelframe12.configure(highlightbackground="wheat")

        self.Scrolledlistbox1 = ScrolledListBox(self.Labelframe12)
        self.Scrolledlistbox1.place(x=20, y=30, height=178, width=246
                , bordermode='ignore')
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(disabledforeground="#b8a786")
        self.Scrolledlistbox1.configure(exportselection="0")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightbackground="wheat")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")

        self.Label7 = tk.Label(self.Labelframe12)
        self.Label7.place(x=8, y=239, height=31, width=319, bordermode='ignore')
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(anchor='w')
        self.Label7.configure(compound='left')
        self.Label7.configure(disabledforeground="#b8a786")
        self.Label7.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label7.configure(highlightbackground="wheat")
        self.Label7.configure(relief="groove")
        self.Label7.configure(text='''Label''')
        self.Label7.configure(textvariable=self.ListDisplay2)
        self.ListDisplay2.set('''Label''')

        self.Labelframe13 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe13.place(x=674, y=3, height=274, width=336)
        self.Labelframe13.configure(relief='groove')
        self.Labelframe13.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe13.configure(text='''ScrolledSpinbox Widget''')
        self.Labelframe13.configure(highlightbackground="wheat")

        self.Scrolledspinbox1 = ScrolledSpinbox(self.Labelframe13, from_=1.0, to=100.0)
        self.Scrolledspinbox1.place(x=40, y=30, height=35, width=208
                , bordermode='ignore')
        self.Scrolledspinbox1.configure(activebackground="#f9f9f9")
        self.Scrolledspinbox1.configure(background="white")
        self.Scrolledspinbox1.configure(disabledforeground="#b8a786")
        self.Scrolledspinbox1.configure(insertborderwidth="1")
        self.Scrolledspinbox1.configure(selectbackground="#c4c4c4")

        self.Labelframe14 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe14.place(x=1010, y=3, height=274, width=336)
        self.Labelframe14.configure(relief='groove')
        self.Labelframe14.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe14.configure(text='''ScrolledText Widget''')
        self.Labelframe14.configure(highlightbackground="wheat")

        self.Scrolledtext1 = ScrolledText(self.Labelframe14)
        self.Scrolledtext1.place(x=10, y=30, height=231, width=322
                , bordermode='ignore')
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(exportselection="0")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(wrap="word")

        self.Labelframe15 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe15.place(x=2, y=276, height=274, width=336)
        self.Labelframe15.configure(relief='groove')
        self.Labelframe15.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe15.configure(text='''ScrolledTreeview Widget''')
        self.Labelframe15.configure(highlightbackground="wheat")

        self.Scrolledtreeview1 = ScrolledTreeView(self.Labelframe15)
        self.Scrolledtreeview1.place(x=20, y=40, height=101, width=240
                , bordermode='ignore')
        self.Scrolledtreeview1.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="113")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="113")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.Labelframe16 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe16.place(x=338, y=276, height=274, width=336)
        self.Labelframe16.configure(relief='groove')
        self.Labelframe16.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe16.configure(text='''ScrolledWindow Widget''')
        self.Labelframe16.configure(highlightbackground="wheat")

        self.Scrolledwindow1 = ScrolledWindow(self.Labelframe16)
        self.Scrolledwindow1.place(x=10, y=20, height=245, width=147
                , bordermode='ignore')
        self.Scrolledwindow1.configure(background="white")
        self.Scrolledwindow1.configure(borderwidth="2")
        self.Scrolledwindow1.configure(highlightbackground="wheat")
        self.Scrolledwindow1.configure(relief="groove")
        self.Scrolledwindow1.configure(selectbackground="#c4c4c4")
        self.color = self.Scrolledwindow1.cget("background")
        self.Scrolledwindow1_f = tk.Frame(self.Scrolledwindow1,
                            background=self.color)
        self.Scrolledwindow1.create_window(0, 0, anchor='nw',
                                           window=self.Scrolledwindow1_f)

        self.Label8 = tk.Label(self.Labelframe16)
        self.Label8.place(x=190, y=100, height=21, width=129
                , bordermode='ignore')
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(anchor='w')
        self.Label8.configure(compound='left')
        self.Label8.configure(disabledforeground="#b8a786")
        self.Label8.configure(highlightbackground="wheat")
        self.Label8.configure(text='''Label''')
        self.Label8.configure(textvariable=self.IconName)
        self.IconName.set('''Label''')
        self.Label8.configure(wraplength="165")

        self.Labelframe17 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe17.place(x=674, y=276, height=274, width=336)
        self.Labelframe17.configure(relief='groove')
        self.Labelframe17.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe17.configure(text='''Custom Widget''')
        self.Labelframe17.configure(highlightbackground="wheat")

        self.Custom1 = widgetdemo_support.Custom(self.Labelframe17)
        self.Custom1.place(x=10, y=80, height=177, width=156
                , bordermode='ignore')

        self.Message2 = tk.Message(self.Labelframe17)
        self.Message2.place(x=8, y=20, height=51, width=322, bordermode='ignore')

        self.Message2.configure(borderwidth="2")
        self.Message2.configure(highlightbackground="wheat")
        self.Message2.configure(padx="1")
        self.Message2.configure(pady="1")
        self.Message2.configure(relief="groove")
        self.Message2.configure(text='''Message''')
        self.Message2.configure(textvariable=self.CustomWidgetData)
        self.CustomWidgetData.set('''Message''')
        self.Message2.configure(width=322)

        self.Button2 = tk.Button(self.Labelframe17)
        self.Button2.place(x=200, y=110, height=33, width=113
                , bordermode='ignore')
        self.Button2.configure(activebackground="beige")
        self.Button2.configure(command=widgetdemo_support.on_btnGetChecks)
        self.Button2.configure(compound='left')
        self.Button2.configure(disabledforeground="#b8a786")
        self.Button2.configure(highlightbackground="wheat")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Get Checks''')

        self.Button3 = tk.Button(self.Labelframe17)
        self.Button3.place(x=200, y=160, height=33, width=113
                , bordermode='ignore')
        self.Button3.configure(activebackground="beige")
        self.Button3.configure(command=widgetdemo_support.on_btnClearChecks)
        self.Button3.configure(compound='left')
        self.Button3.configure(disabledforeground="#b8a786")
        self.Button3.configure(highlightbackground="wheat")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Clear Checks''')

        self.Labelframe18 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe18.place(x=1010, y=276, height=274, width=336)
        self.Labelframe18.configure(relief='groove')
        self.Labelframe18.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe18.configure(text='''PNotebook Widget''')
        self.Labelframe18.configure(highlightbackground="wheat")

        PNOTEBOOK="ClosetabNotebook"
        self.PNotebook1 = ttk.Notebook(self.Labelframe18)
        self.PNotebook1.place(x=10, y=30, height=226, width=302
                , bordermode='ignore')
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(0, text='''Page 1''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t1.configure(highlightbackground="wheat")
        self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t2, padding=3)
        self.PNotebook1.tab(1, text='''Page 2''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t2.configure(highlightbackground="wheat")

        self.Label9 = tk.Label(self.PNotebook1_t1)
        self.Label9.place(x=20, y=70, height=21, width=249)
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(anchor='w')
        self.Label9.configure(compound='left')
        self.Label9.configure(disabledforeground="#b8a786")
        self.Label9.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label9.configure(highlightbackground="wheat")
        self.Label9.configure(text='''This is the PNotebook Widget''')

        self.Label10 = tk.Label(self.PNotebook1_t2)
        self.Label10.place(x=40, y=70, height=31, width=236)
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(anchor='w')
        self.Label10.configure(compound='left')
        self.Label10.configure(disabledforeground="#b8a786")
        self.Label10.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label10.configure(highlightbackground="wheat")
        self.Label10.configure(text='''There's Nothing To See Here!''')
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)

        self.Labelframe19 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe19.place(x=1, y=10, height=274, width=337)
        self.Labelframe19.configure(relief='groove')
        self.Labelframe19.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe19.configure(text='''Linked Labels''')
        self.Labelframe19.configure(highlightbackground="wheat")

        self.Label11 = tk.Label(self.Labelframe19)
        self.Label11.place(x=30, y=50, height=21, width=259, bordermode='ignore')

        self.Label11.configure(activebackground="#f9f9f9")
        self.Label11.configure(anchor='w')
        self.Label11.configure(compound='left')
        self.Label11.configure(disabledforeground="#b8a786")
        self.Label11.configure(font="-family {DejaVu Sans} -size 10 -weight bold -underline 1")
        self.Label11.configure(foreground="blue")
        self.Label11.configure(highlightbackground="wheat")
        self.Label11.configure(text='''Full Circle Magazine''')

        self.Label12 = tk.Label(self.Labelframe19)
        self.Label12.place(x=30, y=100, height=21, width=289
                , bordermode='ignore')
        self.Label12.configure(activebackground="#f9f9f9")
        self.Label12.configure(anchor='w')
        self.Label12.configure(compound='left')
        self.Label12.configure(disabledforeground="#b8a786")
        self.Label12.configure(font="-family {DejaVu Sans} -size 10 -weight bold -underline 1")
        self.Label12.configure(foreground="Blue")
        self.Label12.configure(highlightbackground="wheat")
        self.Label12.configure(text='''PAGE Download Site on SourceForge''')

        self.Label13 = tk.Label(self.Labelframe19)
        self.Label13.place(x=30, y=150, height=21, width=257
                , bordermode='ignore')
        self.Label13.configure(activebackground="#f9f9f9")
        self.Label13.configure(anchor='w')
        self.Label13.configure(compound='left')
        self.Label13.configure(disabledforeground="#b8a786")
        self.Label13.configure(font="-family {DejaVu Sans} -size 10 -weight bold -underline 1")
        self.Label13.configure(foreground="blue")
        self.Label13.configure(highlightbackground="wheat")
        self.Label13.configure(text='''TheDesignatedGeek Web Page''')

        self.Labelframe20 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe20.place(x=338, y=10, height=274, width=337)
        self.Labelframe20.configure(relief='groove')
        self.Labelframe20.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe20.configure(text='''Vertical Labels''')
        self.Labelframe20.configure(highlightbackground="wheat")

        self.Label14 = tk.Label(self.Labelframe20)
        self.Label14.place(x=20, y=40, height=201, width=39, bordermode='ignore')

        self.Label14.configure(activebackground="#f9f9f9")
        self.Label14.configure(anchor='w')
        self.Label14.configure(compound='left')
        self.Label14.configure(disabledforeground="#b8a786")
        self.Label14.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.Label14.configure(highlightbackground="wheat")
        self.Label14.configure(padx="5")
        self.Label14.configure(relief="groove")
        self.Label14.configure(text='''Vertical''')
        self.Label14.configure(wraplength="1")

        self.Label15 = tk.Label(self.Labelframe20)
        self.Label15.place(x=100, y=70, height=118, width=158
                , bordermode='ignore')
        self.Label15.configure(activebackground="#f9f9f9")
        self.Label15.configure(anchor='w')
        self.Label15.configure(compound='left')
        self.Label15.configure(disabledforeground="#b8a786")
        self.Label15.configure(font="-family {DejaVu Sans} -size 12 -weight bold")
        self.Label15.configure(highlightbackground="wheat")
        self.Label15.configure(text='''Simply set the wrap length attribute to 1.  The problem is that you can't have spaces.''')
        self.Label15.configure(wraplength="160")

        self.Labelframe21 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe21.place(x=675, y=10, height=274, width=337)
        self.Labelframe21.configure(relief='groove')
        self.Labelframe21.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe21.configure(text='''Flashing Button''')
        self.Labelframe21.configure(highlightbackground="wheat")

        self.Button4 = tk.Button(self.Labelframe21)
        self.Button4.place(x=60, y=50, height=23, width=203, bordermode='ignore')

        self.Button4.configure(activebackground="beige")
        self.Button4.configure(command=widgetdemo_support.on_FlashButton)
        self.Button4.configure(compound='left')
        self.Button4.configure(disabledforeground="#b8a786")
        self.Button4.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button4.configure(highlightbackground="wheat")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Make The Button Flash''')

        self.Button5 = tk.Button(self.Labelframe21)
        self.Button5.place(x=60, y=100, height=33, width=198
                , bordermode='ignore')
        self.Button5.configure(activebackground="Red")
        self.Button5.configure(compound='left')
        self.Button5.configure(disabledforeground="#b8a786")
        self.Button5.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Button5.configure(highlightbackground="wheat")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Flashing Button''')

        self.Spinbox2 = tk.Spinbox(self.Labelframe21, from_=1.0, to=25.0)
        self.Spinbox2.place(x=110, y=190, height=23, width=98
                , bordermode='ignore')
        self.Spinbox2.configure(activebackground="#f9f9f9")
        self.Spinbox2.configure(background="white")
        self.Spinbox2.configure(buttonbackground="wheat")
        self.Spinbox2.configure(command=widgetdemo_support.on_FlashButtonCount)
        self.Spinbox2.configure(disabledforeground="#b8a786")
        self.Spinbox2.configure(font="TkDefaultFont")
        self.Spinbox2.configure(highlightbackground="black")
        self.Spinbox2.configure(selectbackground="#c4c4c4")
        self.Spinbox2.configure(textvariable=self.TimesToFlash)
        self.Spinbox2.configure(wrap="1")

        self.Label16 = tk.Label(self.Labelframe21)
        self.Label16.place(x=30, y=160, height=21, width=289
                , bordermode='ignore')
        self.Label16.configure(activebackground="#f9f9f9")
        self.Label16.configure(anchor='w')
        self.Label16.configure(compound='left')
        self.Label16.configure(disabledforeground="#b8a786")
        self.Label16.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label16.configure(highlightbackground="wheat")
        self.Label16.configure(text='''Number of times to flash the button''')

        self.Labelframe22 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe22.place(x=1012, y=10, height=274, width=337)
        self.Labelframe22.configure(relief='groove')
        self.Labelframe22.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Labelframe22.configure(text='''Repeating Button''')
        self.Labelframe22.configure(highlightbackground="wheat")

        self.Button6 = tk.Button(self.Labelframe22)
        self.Button6.place(x=50, y=60, height=33, width=243, bordermode='ignore')

        self.Button6.configure(activebackground="red")
        self.Button6.configure(command=widgetdemo_support.on_RepeatButton)
        self.Button6.configure(compound='left')
        self.Button6.configure(disabledforeground="#b8a786")
        self.Button6.configure(font="-family {DejaVu Sans} -size 11 -weight bold")
        self.Button6.configure(highlightbackground="wheat")
        self.Button6.configure(pady="0")
        self.Button6.configure(text='''Click and Hold to Repeat''')

        self.Label17 = tk.Label(self.Labelframe22)
        self.Label17.place(x=30, y=130, height=21, width=169
                , bordermode='ignore')
        self.Label17.configure(activebackground="#f9f9f9")
        self.Label17.configure(anchor='w')
        self.Label17.configure(compound='left')
        self.Label17.configure(disabledforeground="#b8a786")
        self.Label17.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label17.configure(highlightbackground="wheat")
        self.Label17.configure(text='''# of times repeated:''')

        self.Label18 = tk.Label(self.Labelframe22)
        self.Label18.place(x=210, y=130, height=21, width=46
                , bordermode='ignore')
        self.Label18.configure(activebackground="#f9f9f9")
        self.Label18.configure(anchor='w')
        self.Label18.configure(compound='left')
        self.Label18.configure(disabledforeground="#b8a786")
        self.Label18.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label18.configure(highlightbackground="wheat")
        self.Label18.configure(text='''Label''')
        self.Label18.configure(textvariable=self.RepeatedCount)
        self.RepeatedCount.set('''Label''')

        self.Scale3 =  tk.Scale(self.Labelframe22, from_=0.0, to=100.0, resolution=1.0)
        self.Scale3.place(x=10, y=200, height=42, width=104)
        self.Scale3.configure(activebackground="beige")
        self.Scale3.configure(command=widgetdemo_support.on_RepeatDelay)
        self.Scale3.configure(highlightbackground="wheat")
        self.Scale3.configure(length="104")
        self.Scale3.configure(orient="horizontal")
        self.Scale3.configure(troughcolor="#d9d9d9")
        self.Scale3.configure(variable=self.RptDelay)

        self.Scale4 =  tk.Scale(self.Labelframe22, from_=0.0, to=100.0, resolution=1.0)
        self.Scale4.place(x=170, y=200, height=42, width=104)
        self.Scale4.configure(activebackground="beige")
        self.Scale4.configure(command=widgetdemo_support.on_RepeatInterval)
        self.Scale4.configure(highlightbackground="wheat")
        self.Scale4.configure(orient="horizontal")
        self.Scale4.configure(troughcolor="#d9d9d9")
        self.Scale4.configure(variable=self.RptInterval)

        self.Label19 = tk.Label(self.Labelframe22)
        self.Label19.place(x=20, y=170, height=21, width=115
                , bordermode='ignore')
        self.Label19.configure(activebackground="#f9f9f9")
        self.Label19.configure(anchor='w')
        self.Label19.configure(compound='left')
        self.Label19.configure(disabledforeground="#b8a786")
        self.Label19.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label19.configure(highlightbackground="wheat")
        self.Label19.configure(text='''Repeat Delay''')

        self.Label20 = tk.Label(self.Labelframe22)
        self.Label20.place(x=170, y=170, height=21, width=131
                , bordermode='ignore')
        self.Label20.configure(activebackground="#f9f9f9")
        self.Label20.configure(anchor='w')
        self.Label20.configure(compound='left')
        self.Label20.configure(disabledforeground="#b8a786")
        self.Label20.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.Label20.configure(highlightbackground="wheat")
        self.Label20.configure(text='''Repeat Interval''')

        self.frameStatus = tk.Frame(self.top)
        self.frameStatus.place(x=1, y=640, height=58, width=1353)
        self.frameStatus.configure(relief='sunken')
        self.frameStatus.configure(borderwidth="2")
        self.frameStatus.configure(relief="sunken")
        self.frameStatus.configure(background="gray42")
        self.frameStatus.configure(highlightbackground="wheat")

        self.LblStatusTime = tk.Label(self.frameStatus)
        self.LblStatusTime.place(x=1231, y=6, height=45, width=119)
        self.LblStatusTime.configure(activebackground="#f9f9f9")
        self.LblStatusTime.configure(background="gray47")
        self.LblStatusTime.configure(compound='left')
        self.LblStatusTime.configure(disabledforeground="#b8a786")
        self.LblStatusTime.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.LblStatusTime.configure(foreground="#ffffff")
        self.LblStatusTime.configure(highlightbackground="wheat")
        self.LblStatusTime.configure(relief="sunken")
        self.LblStatusTime.configure(text='''Label''')
        self.LblStatusTime.configure(textvariable=self.StatusTime)
        self.StatusTime.set('''Label''')

        self.LblStatusInfo1 = tk.Label(self.frameStatus)
        self.LblStatusInfo1.place(x=3, y=6, height=45, width=546)
        self.LblStatusInfo1.configure(activebackground="#f9f9f9")
        self.LblStatusInfo1.configure(anchor='w')
        self.LblStatusInfo1.configure(background="gray47")
        self.LblStatusInfo1.configure(compound='left')
        self.LblStatusInfo1.configure(disabledforeground="#b8a786")
        self.LblStatusInfo1.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.LblStatusInfo1.configure(foreground="#ffffff")
        self.LblStatusInfo1.configure(highlightbackground="wheat")
        self.LblStatusInfo1.configure(relief="sunken")
        self.LblStatusInfo1.configure(text='''Label''')
        self.LblStatusInfo1.configure(textvariable=self.StatusInfo1)
        self.StatusInfo1.set('''Label''')

        self.LblStatusInfo2 = tk.Label(self.frameStatus)
        self.LblStatusInfo2.place(x=550, y=8, height=44, width=676)
        self.LblStatusInfo2.configure(activebackground="#f9f9f9")
        self.LblStatusInfo2.configure(anchor='w')
        self.LblStatusInfo2.configure(background="gray47")
        self.LblStatusInfo2.configure(compound='left')
        self.LblStatusInfo2.configure(disabledforeground="#b8a786")
        self.LblStatusInfo2.configure(font="-family {DejaVu Sans} -size 10 -weight bold")
        self.LblStatusInfo2.configure(foreground="#ffffff")
        self.LblStatusInfo2.configure(highlightbackground="wheat")
        self.LblStatusInfo2.configure(relief="sunken")
        self.LblStatusInfo2.configure(text='''Label''')
        self.LblStatusInfo2.configure(textvariable=self.StatusInfo2)
        self.StatusInfo2.set('''Label''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top, activebackground='beige'
                ,disabledforeground='#b8a786', tearoff=0)
        self.menubar.add_cascade(label='Tabs',menu=self.sub_menu,)
        self.sub_menu.add_command(command=lambda :widgetdemo_support.on_mnuTab(0)
                ,label='Standard Tk Widgets')
        self.sub_menu.add_command(command=lambda :widgetdemo_support.on_mnuTab(1)
                ,label='ttk Themed Widgets')
        self.sub_menu.add_command(command=lambda :widgetdemo_support.on_mnuTab(2)
                ,label='Enhanced Widgets')
        self.sub_menu.add_command(command=lambda :widgetdemo_support.on_mnuTab(3)
                ,label='Special Twists on Normal Widgets')
        self.sub_menu.add_separator()
        self.sub_menu.add_command(command=lambda :widgetdemo_support.on_mnuTab(4)
                ,label='Exit')

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [165, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def __adjust_sash1(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid1)
        del self.__funcid1

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except tk.TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

class ScrolledEntry(AutoScroll, tk.Entry):
    '''A standard Tkinter Entry widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Entry.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledSpinbox(AutoScroll, tk.Spinbox):
    '''A standard Tkinter Spinbox widget with a horizontal scrollbar
    that will automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Spinbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledWindow(AutoScroll, tk.Canvas):
    '''A standard Tkinter Canvas widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Canvas.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    widgetdemo_support.main()

if __name__ == '__main__':
    widgetdemo_support.main()




